import pytest
from pipask.infra.vulnerability_details import (
    VulnerabilitySeverity,
    OsvVulnerabilityDetailsService,
    VulnerabilityDetails,
)
from pipask.infra.pypi import VulnerabilityPypi
from contextlib import aclosing


@pytest.mark.parametrize(
    "input_values,expected",
    [
        # Single values
        ((VulnerabilitySeverity.CRITICAL,), VulnerabilitySeverity.CRITICAL),
        ((VulnerabilitySeverity.LOW,), VulnerabilitySeverity.LOW),
        # Multiple values
        (
            (VulnerabilitySeverity.LOW, VulnerabilitySeverity.HIGH, VulnerabilitySeverity.MEDIUM),
            VulnerabilitySeverity.HIGH,
        ),
        # None values
        ((None,), None),
        ((None, None), None),
        # Mixed values
        ((None, VulnerabilitySeverity.MEDIUM, None, VulnerabilitySeverity.CRITICAL), VulnerabilitySeverity.CRITICAL),
        # Empty
        ((), None),
    ],
)
def test_vulnerability_severity_get_worst(input_values, expected):
    assert VulnerabilitySeverity.get_worst(*input_values) == expected


@pytest.mark.integration
@pytest.mark.asyncio
async def test_osv_vulnerability_details_with_cve():
    async with aclosing(OsvVulnerabilityDetailsService()) as details_service:
        vuln = VulnerabilityPypi(
            id="PYSEC-2021-9",
            link="https://osv.dev/vulnerability/PYSEC-2021-9",
            aliases=["BIT-django-2021-3281", "CVE-2021-3281", "GHSA-fvgf-6h6h-3322"],
        )

        details = await details_service.get_details(vuln)

        assert details == VulnerabilityDetails(
            id="CVE-2021-3281",
            severity=VulnerabilitySeverity.MEDIUM,
            link="https://osv.dev/vulnerability/CVE-2021-3281",
        )


@pytest.mark.integration
@pytest.mark.asyncio
async def test_osv_vulnerability_details_with_ghsa_only():
    async with aclosing(OsvVulnerabilityDetailsService()) as details_service:
        vuln = VulnerabilityPypi(
            id="PYSEC-2021-9",
            link="https://osv.dev/vulnerability/PYSEC-2021-9",
            aliases=["BIT-django-2021-3281", "GHSA-fvgf-6h6h-3322"],
        )

        details = await details_service.get_details(vuln)

        assert details == VulnerabilityDetails(
            id="GHSA-fvgf-6h6h-3322",
            severity=VulnerabilitySeverity.MEDIUM,
            link="https://osv.dev/vulnerability/GHSA-fvgf-6h6h-3322",
        )


@pytest.mark.asyncio
async def test_osv_vulnerability_details_with_pysec_only():
    async with aclosing(OsvVulnerabilityDetailsService()) as details_service:
        vuln = VulnerabilityPypi(
            id="PYSEC-2021-9",
            link="https://osv.dev/vulnerability/PYSEC-2021-9",
            aliases=[],
        )

        details = await details_service.get_details(vuln)

        assert details == VulnerabilityDetails(
            id="PYSEC-2021-9",
            severity=None,
            link="https://osv.dev/vulnerability/PYSEC-2021-9",
        )
