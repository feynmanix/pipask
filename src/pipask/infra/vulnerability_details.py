from abc import ABC, abstractmethod
from enum import Enum
from typing import Optional
from dataclasses import dataclass

from pipask.checks.types import CheckResultType
from pipask.infra.pypi import VulnerabilityPypi


class VulnerabilitySeverity(str, Enum):
    # MUST be ordered from most severe to least severe
    CRITICAL = ("CRITICAL", CheckResultType.FAILURE)
    HIGH = ("HIGH", CheckResultType.FAILURE)
    MODERATE = ("Moderate", CheckResultType.WARNING)
    LOW = ("Low", CheckResultType.NEUTRAL)
    NONE = ("None", CheckResultType.NEUTRAL)

    result_type: CheckResultType

    def __new__(cls, value: str, result_type: CheckResultType):
        obj = str.__new__(cls, [value])
        obj._value_ = value
        obj.result_type = result_type
        return obj

    @staticmethod
    def get_worst(*results: Optional["VulnerabilitySeverity"]) -> Optional["VulnerabilitySeverity"]:
        for severity in VulnerabilitySeverity:
            if any(result is severity for result in results):
                return severity
        return None


@dataclass
class VulnerabilityDetails:
    id: str | None
    severity: VulnerabilitySeverity | None
    link: str | None = None


class VulnerabilityDetailsService(ABC):
    @abstractmethod
    async def get_details(self, vulnerability: VulnerabilityPypi) -> VulnerabilityDetails:
        pass


class DummyVulnerabilityDetailsService(VulnerabilityDetailsService):
    async def get_details(self, vulnerability: VulnerabilityPypi) -> VulnerabilityDetails:
        return VulnerabilityDetails(id=vulnerability.id, severity=None, link=vulnerability.link)

        # "aliases": [
        # "CVE-2021-31542",
        # "GHSA-rxjp-mfm9-w4wr"
        # ],

    # "id": "PYSEC-2021-7",
    # "link": "https://osv.dev/vulnerability/PYSEC-2021-7",
